"""
Fonctions utilitaires et helpers pour l'application {{ project_name }}
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Union
import hashlib
import json


def format_number(number: Union[int, float], prefix: str = "", suffix: str = "") -> str:
    """
    Formate un nombre avec des s√©parateurs de milliers.
    
    Args:
        number: Nombre √† formater
        prefix: Pr√©fixe (ex: "$", "‚Ç¨")
        suffix: Suffixe (ex: "%", "‚Ç¨")
    
    Returns:
        Nombre format√© en string
    """
    if pd.isna(number):
        return "N/A"
    
    if isinstance(number, float):
        formatted = f"{number:,.2f}"
    else:
        formatted = f"{number:,}"
    
    # Remplacer les s√©parateurs anglais par fran√ßais
    formatted = formatted.replace(",", " ")
    
    return f"{prefix}{formatted}{suffix}"


def format_percentage(value: float, decimals: int = 1) -> str:
    """
    Formate un pourcentage.
    
    Args:
        value: Valeur d√©cimale (ex: 0.15 pour 15%)
        decimals: Nombre de d√©cimales
    
    Returns:
        Pourcentage format√©
    """
    if pd.isna(value):
        return "N/A"
    
    return f"{value * 100:.{decimals}f}%"


def safe_divide(numerator: float, denominator: float, default: float = 0.0) -> float:
    """
    Division s√©curis√©e qui √©vite la division par z√©ro.
    
    Args:
        numerator: Num√©rateur
        denominator: D√©nominateur
        default: Valeur par d√©faut si division par z√©ro
    
    Returns:
        R√©sultat de la division ou valeur par d√©faut
    """
    if denominator == 0 or pd.isna(denominator):
        return default
    return numerator / denominator


def calculate_growth_rate(current: float, previous: float) -> float:
    """
    Calcule le taux de croissance entre deux valeurs.
    
    Args:
        current: Valeur actuelle
        previous: Valeur pr√©c√©dente
    
    Returns:
        Taux de croissance (ex: 0.15 pour +15%)
    """
    if pd.isna(current) or pd.isna(previous) or previous == 0:
        return 0.0
    
    return (current - previous) / previous


def create_date_range(start_date: datetime, end_date: datetime, freq: str = 'D') -> List[datetime]:
    """
    Cr√©e une liste de dates entre deux dates.
    
    Args:
        start_date: Date de d√©but
        end_date: Date de fin
        freq: Fr√©quence ('D' pour jour, 'W' pour semaine, etc.)
    
    Returns:
        Liste des dates
    """
    return pd.date_range(start=start_date, end=end_date, freq=freq).tolist()


def filter_dataframe(df: pd.DataFrame, filters: Dict[str, Any]) -> pd.DataFrame:
    """
    Filtre un DataFrame selon des crit√®res donn√©s.
    
    Args:
        df: DataFrame √† filtrer
        filters: Dictionnaire des filtres {colonne: valeur(s)}
    
    Returns:
        DataFrame filtr√©
    """
    filtered_df = df.copy()
    
    for column, value in filters.items():
        if column in filtered_df.columns:
            if isinstance(value, list):
                filtered_df = filtered_df[filtered_df[column].isin(value)]
            else:
                filtered_df = filtered_df[filtered_df[column] == value]
    
    return filtered_df


def generate_color_palette(n_colors: int, palette: str = "default") -> List[str]:
    """
    G√©n√®re une palette de couleurs.
    
    Args:
        n_colors: Nombre de couleurs n√©cessaires
        palette: Type de palette ('default', 'warm', 'cool')
    
    Returns:
        Liste de codes couleur hexad√©cimaux
    """
    palettes = {
        'default': ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#DDA0DD', '#87CEEB'],
        'warm': ['#FF6B6B', '#FFA07A', '#FFD700', '#FF7F50', '#FF69B4', '#FFB6C1', '#F0E68C'],
        'cool': ['#4ECDC4', '#45B7D1', '#87CEEB', '#98D8C8', '#B0E0E6', '#AFEEEE', '#E0FFFF']
    }
    
    base_colors = palettes.get(palette, palettes['default'])
    
    # Si on a besoin de plus de couleurs que disponibles, les r√©p√©ter
    colors = []
    for i in range(n_colors):
        colors.append(base_colors[i % len(base_colors)])
    
    return colors


def cache_data(key: str, data: Any, ttl: int = 3600) -> None:
    """
    Met en cache des donn√©es dans la session Streamlit.
    
    Args:
        key: Cl√© du cache
        data: Donn√©es √† cacher
        ttl: Dur√©e de vie en secondes
    """
    cache_entry = {
        'data': data,
        'timestamp': datetime.now(),
        'ttl': ttl
    }
    
    if 'cache' not in st.session_state:
        st.session_state.cache = {}
    
    st.session_state.cache[key] = cache_entry


def get_cached_data(key: str) -> Optional[Any]:
    """
    R√©cup√®re des donn√©es du cache.
    
    Args:
        key: Cl√© du cache
    
    Returns:
        Donn√©es cach√©es ou None si expir√©es/inexistantes
    """
    if 'cache' not in st.session_state or key not in st.session_state.cache:
        return None
    
    cache_entry = st.session_state.cache[key]
    
    # V√©rifier si les donn√©es ne sont pas expir√©es
    if datetime.now() - cache_entry['timestamp'] > timedelta(seconds=cache_entry['ttl']):
        del st.session_state.cache[key]
        return None
    
    return cache_entry['data']


def hash_string(text: str) -> str:
    """
    G√©n√®re un hash MD5 d'une cha√Æne de caract√®res.
    
    Args:
        text: Texte √† hasher
    
    Returns:
        Hash MD5 en hexad√©cimal
    """
    return hashlib.md5(text.encode()).hexdigest()


def export_to_csv(df: pd.DataFrame, filename: str = None) -> str:
    """
    Exporte un DataFrame au format CSV.
    
    Args:
        df: DataFrame √† exporter
        filename: Nom du fichier (optionnel)
    
    Returns:
        CSV en format string
    """
    if filename is None:
        filename = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    return df.to_csv(index=False)


def validate_email(email: str) -> bool:
    """
    Valide un format d'email basique.
    
    Args:
        email: Adresse email √† valider
    
    Returns:
        True si le format est correct
    """
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    Tronque un texte √† une longueur maximale.
    
    Args:
        text: Texte √† tronquer
        max_length: Longueur maximale
        suffix: Suffixe √† ajouter si tronqu√©
    
    Returns:
        Texte tronqu√©
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def create_download_link(data: str, filename: str, mime_type: str = "text/plain") -> None:
    """
    Cr√©e un lien de t√©l√©chargement Streamlit.
    
    Args:
        data: Donn√©es √† t√©l√©charger
        filename: Nom du fichier
        mime_type: Type MIME du fichier
    """
    st.download_button(
        label=f"üì• T√©l√©charger {filename}",
        data=data,
        file_name=filename,
        mime=mime_type
    )


def show_success_message(message: str, duration: int = 3) -> None:
    """
    Affiche un message de succ√®s temporaire.
    
    Args:
        message: Message √† afficher
        duration: Dur√©e en secondes
    """
    success_placeholder = st.empty()
    success_placeholder.success(message)
    
    # Note: Streamlit ne permet pas de supprimer automatiquement apr√®s X secondes
    # Cette fonction est pr√©par√©e pour une future version qui le permettrait


def log_user_action(action: str, details: Dict[str, Any] = None) -> None:
    """
    Enregistre une action utilisateur (pour analytics).
    
    Args:
        action: Type d'action
        details: D√©tails suppl√©mentaires
    """
    if 'user_actions' not in st.session_state:
        st.session_state.user_actions = []
    
    log_entry = {
        'timestamp': datetime.now().isoformat(),
        'action': action,
        'details': details or {},
        'session_id': st.session_state.get('session_id', 'unknown')
    }
    
    st.session_state.user_actions.append(log_entry)
    
    # Garder seulement les 100 derni√®res actions
    if len(st.session_state.user_actions) > 100:
        st.session_state.user_actions = st.session_state.user_actions[-100:]


class DataProcessor:
    """Classe utilitaire pour le traitement des donn√©es."""
    
    @staticmethod
    def clean_dataframe(df: pd.DataFrame) -> pd.DataFrame:
        """
        Nettoie un DataFrame (supprime les doublons, g√®re les valeurs manquantes).
        
        Args:
            df: DataFrame √† nettoyer
        
        Returns:
            DataFrame nettoy√©
        """
        # Supprimer les doublons
        df_clean = df.drop_duplicates()
        
        # Optionnel: remplir les valeurs manquantes
        # df_clean = df_clean.fillna(method='forward')
        
        return df_clean
    
    @staticmethod
    def aggregate_data(df: pd.DataFrame, group_by: str, agg_func: str = 'sum') -> pd.DataFrame:
        """
        Agr√®ge les donn√©es selon une colonne.
        
        Args:
            df: DataFrame √† agr√©ger
            group_by: Colonne de regroupement
            agg_func: Fonction d'agr√©gation ('sum', 'mean', 'count', etc.)
        
        Returns:
            DataFrame agr√©g√©
        """
        numeric_columns = df.select_dtypes(include=[np.number]).columns
        return df.groupby(group_by)[numeric_columns].agg(agg_func).reset_index()


# D√©corateurs utiles
def timer(func):
    """D√©corateur pour mesurer le temps d'ex√©cution d'une fonction."""
    import time
    import functools
    
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        
        execution_time = end_time - start_time
        st.sidebar.metric(f"‚è±Ô∏è {func.__name__}", f"{execution_time:.3f}s")
        
        return result
    
    return wrapper


# Constantes utiles
COMMON_DATE_FORMATS = [
    "%Y-%m-%d",
    "%d/%m/%Y",
    "%m/%d/%Y",
    "%Y-%m-%d %H:%M:%S",
    "%d/%m/%Y %H:%M:%S"
]

DEFAULT_COLORS = {
    'primary': '#FF6B6B',
    'secondary': '#4ECDC4',
    'success': '#2ECC71',
    'warning': '#F39C12',
    'danger': '#E74C3C',
    'info': '#3498DB'
}


if __name__ == "__main__":
    # Tests des fonctions utilitaires
    st.title("üîß Test des fonctions utilitaires")
    
    # Test de formatage de nombres
    st.subheader("Formatage de nombres")
    st.write(f"1234567 ‚Üí {format_number(1234567)}")
    st.write(f"0.1542 ‚Üí {format_percentage(0.1542)}")
    
    # Test de la palette de couleurs
    st.subheader("Palette de couleurs")
    colors = generate_color_palette(5)
    for i, color in enumerate(colors):
        st.color_picker(f"Couleur {i+1}", color, disabled=True)