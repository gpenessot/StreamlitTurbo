# 🚀 {{ project_name }} - Justfile Cross-Platform
# Compatible Windows (PowerShell), Linux et macOS

# Configuration du shell selon l'OS - Just détecte automatiquement
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

# Variables
PYTHON_VERSION := "{{ python_version }}"
PROJECT_NAME := "{{ project_slug }}"

# Détection de l'OS (variable Just)
is_windows := if os() == "windows" { "true" } else { "false" }

# 🎯 Setup complet du projet en une commande
setup:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🚀 Setup complet de {{ PROJECT_NAME }}..." -ForegroundColor Green` } else { `echo "🚀 Setup complet de {{ PROJECT_NAME }}..."` } }}{% endraw %}
    {% raw %}@{{ if is_windows == "true" { `Write-Host "📦 Initialisation avec uv..." -ForegroundColor Cyan` } else { `echo "📦 Initialisation avec uv..."` } }}{% endraw %}
    uv init --python {{ python_version }}
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🐍 Création de l'environnement virtuel..." -ForegroundColor Cyan` } else { `echo "🐍 Création de l'environnement virtuel..."` } }}{% endraw %}
    uv venv --python {{ python_version }}
    {% raw %}@{{ if is_windows == "true" { `Write-Host "📚 Installation des dépendances..." -ForegroundColor Cyan` } else { `echo "📚 Installation des dépendances..."` } }}{% endraw %}
    uv sync
    {% raw %}@{{ if is_windows == "true" { `Write-Host "✅ Setup terminé ! Lancez 'just run'" -ForegroundColor Green` } else { `echo "✅ Setup terminé ! Lancez 'just run'"` } }}{% endraw %}

# 🚀 Lancement de l'application Streamlit
run:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🚀 Lancement de {{ PROJECT_NAME }}..." -ForegroundColor Green` } else { `echo "🚀 Lancement de {{ PROJECT_NAME }}..."` } }}{% endraw %}
    uv run streamlit run main.py

# 📦 Synchronisation des dépendances
sync:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "📦 Synchronisation..." -ForegroundColor Cyan` } else { `echo "📦 Synchronisation..."` } }}{% endraw %}
    uv sync

# 📦 Ajout d'une nouvelle dépendance
add PACKAGE:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "📦 Ajout de {{ PACKAGE }}..." -ForegroundColor Cyan` } else { `echo "📦 Ajout de {{ PACKAGE }}..."` } }}{% endraw %}
    uv add {% raw %}{{ PACKAGE }}{% endraw %}
    {% raw %}@{{ if is_windows == "true" { `Write-Host "✅ Ajouté !" -ForegroundColor Green` } else { `echo "✅ Ajouté !"` } }}{% endraw %}

# 📦 Ajout d'une dépendance de développement
add-dev PACKAGE:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🔧 Ajout de {{ PACKAGE }} (dev)..." -ForegroundColor Cyan` } else { `echo "🔧 Ajout de {{ PACKAGE }} (dev)..."` } }}{% endraw %}
    uv add --dev {% raw %}{{ PACKAGE }}{% endraw %}
    {% raw %}@{{ if is_windows == "true" { `Write-Host "✅ Ajouté !" -ForegroundColor Green` } else { `echo "✅ Ajouté !"` } }}{% endraw %}

# 📄 Génération du requirements.txt pour déploiement
requirements:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "📄 Génération du requirements.txt..." -ForegroundColor Cyan` } else { `echo "📄 Génération du requirements.txt..."` } }}{% endraw %}
    uv pip compile pyproject.toml -o requirements.txt
    {% raw %}@{{ if is_windows == "true" { `Write-Host "✅ Généré !" -ForegroundColor Green` } else { `echo "✅ Généré !"` } }}{% endraw %}

# 🐍 Création de l'environnement virtuel
venv:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🐍 Création du venv..." -ForegroundColor Cyan` } else { `echo "🐍 Création du venv..."` } }}{% endraw %}
    uv venv --python {{ python_version }}

# 🧹 Nettoyage de l'environnement
clean:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🧹 Nettoyage..." -ForegroundColor Yellow` } else { `echo "🧹 Nettoyage..."` } }}{% endraw %}
    {% raw %}@{{ if is_windows == "true" { `if (Test-Path .venv) { Remove-Item -Recurse -Force .venv }; Get-ChildItem -Recurse -Filter "__pycache__" | Remove-Item -Recurse -Force; Get-ChildItem -Recurse -Filter "*.pyc" | Remove-Item -Force` } else { `rm -rf .venv __pycache__ .pytest_cache; find . -type f -name "*.pyc" -delete; find . -type d -name "__pycache__" -delete` } }}{% endraw %}
    {% raw %}@{{ if is_windows == "true" { `Write-Host "✅ Nettoyé !" -ForegroundColor Green` } else { `echo "✅ Nettoyé !"` } }}{% endraw %}

# 🔄 Réinstallation complète
reset: clean setup

# 📊 Lancement en mode développement
dev:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🔧 Mode développement..." -ForegroundColor Cyan` } else { `echo "🔧 Mode développement..."` } }}{% endraw %}
    uv run streamlit run main.py --server.runOnSave=true --server.developmentMode=true

# 🧪 Tests
test:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🧪 Tests..." -ForegroundColor Cyan` } else { `echo "🧪 Tests..."` } }}{% endraw %}
    uv run pytest tests/ -v

# ℹ️ Informations sur le projet
info:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "📋 {{ PROJECT_NAME }}" -ForegroundColor Cyan; Write-Host "  🐍 Python {{ PYTHON_VERSION }}"; Write-Host "  💻 Windows"` } else { `echo "📋 {{ PROJECT_NAME }}"; echo "  🐍 Python {{ PYTHON_VERSION }}"; echo "  💻 $(uname -s)"` } }}{% endraw %}

# 📚 Aide - Liste toutes les commandes
help:
    {% raw %}@{{ if is_windows == "true" { `Write-Host "🚀 {{ PROJECT_NAME }} - Commandes:" -ForegroundColor Green; Write-Host ""; Write-Host "🎯 Principales:" -ForegroundColor Yellow; Write-Host "  just setup  - Setup complet"; Write-Host "  just run    - Lancer l'app"; Write-Host "  just dev    - Mode dev"; Write-Host ""; Write-Host "📦 Dépendances:" -ForegroundColor Yellow; Write-Host "  just sync         - Synchroniser"; Write-Host "  just add PKG      - Ajouter"; Write-Host "  just requirements - Générer requirements.txt"; Write-Host ""; Write-Host "🔧 Autres:" -ForegroundColor Yellow; Write-Host "  just clean - Nettoyer"; Write-Host "  just test  - Tests"; Write-Host "  just info  - Infos"` } else { `echo "🚀 {{ PROJECT_NAME }} - Commandes:"; echo ""; echo "🎯 Principales:"; echo "  just setup  - Setup complet"; echo "  just run    - Lancer l'app"; echo "  just dev    - Mode dev"; echo ""; echo "📦 Dépendances:"; echo "  just sync         - Synchroniser"; echo "  just add PKG      - Ajouter"; echo "  just requirements - Générer requirements.txt"; echo ""; echo "🔧 Autres:"; echo "  just clean - Nettoyer"; echo "  just test  - Tests"; echo "  just info  - Infos"` } }}{% endraw %}

# Commande par défaut
default: help
# 🚀 {{ project_name }} - Justfile Cross-Platform
# Compatible Windows (PowerShell), Linux et macOS

# Configuration automatique du shell selon l'OS
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

# Variables
PYTHON_VERSION := "{{ python_version }}"
PROJECT_NAME := "{{ project_slug }}"

# 🎯 Setup complet du projet en une commande
setup:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🚀 Setup complet de {{ project_name }}..." -ForegroundColor Green
        @Write-Host "📦 Initialisation du projet avec uv..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "🚀 Setup complet de {{ project_name }}..."
        @echo "📦 Initialisation du projet avec uv..."
    {{{{ endif }}}}
    uv init --python {{ python_version }}
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🐍 Création de l'environnement virtuel..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "🐍 Création de l'environnement virtuel..."
    {{{{ endif }}}}
    uv venv --python {{ python_version }}
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "📚 Installation des dépendances..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "📚 Installation des dépendances..."
    {{{{ endif }}}}
    uv sync
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "✅ Setup terminé ! Lancez 'just run' pour démarrer l'app." -ForegroundColor Green
    {{{{ else }}}}
        @echo "✅ Setup terminé ! Lancez 'just run' pour démarrer l'app."
    {{{{ endif }}}}

# 🚀 Lancement de l'application Streamlit
run:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🚀 Lancement de {{ project_name }}..." -ForegroundColor Green
    {{{{ else }}}}
        @echo "🚀 Lancement de {{ project_name }}..."
    {{{{ endif }}}}
    uv run streamlit run main.py

# 📦 Synchronisation des dépendances
sync:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "📦 Synchronisation des dépendances..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "📦 Synchronisation des dépendances..."
    {{{{ endif }}}}
    uv sync

# 📦 Ajout d'une nouvelle dépendance
add PACKAGE:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "📦 Ajout de {{{{ PACKAGE }}}}..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "📦 Ajout de {{{{ PACKAGE }}}}..."
    {{{{ endif }}}}
    uv add {{{{ PACKAGE }}}}
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "✅ {{{{ PACKAGE }}}} ajouté." -ForegroundColor Green
    {{{{ else }}}}
        @echo "✅ {{{{ PACKAGE }}}} ajouté."
    {{{{ endif }}}}

# 📦 Ajout d'une dépendance de développement
add-dev PACKAGE:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🔧 Ajout de {{{{ PACKAGE }}}} (dev)..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "🔧 Ajout de {{{{ PACKAGE }}}} (dev)..."
    {{{{ endif }}}}
    uv add --dev {{{{ PACKAGE }}}}
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "✅ {{{{ PACKAGE }}}} ajouté." -ForegroundColor Green
    {{{{ else }}}}
        @echo "✅ {{{{ PACKAGE }}}} ajouté."
    {{{{ endif }}}}

# 📄 Génération du requirements.txt pour déploiement
requirements:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "📄 Génération du requirements.txt..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "📄 Génération du requirements.txt..."
    {{{{ endif }}}}
    uv pip compile pyproject.toml -o requirements.txt
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "✅ requirements.txt généré." -ForegroundColor Green
    {{{{ else }}}}
        @echo "✅ requirements.txt généré."
    {{{{ endif }}}}

# 🐍 Création de l'environnement virtuel
venv:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🐍 Création de l'environnement virtuel..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "🐍 Création de l'environnement virtuel..."
    {{{{ endif }}}}
    uv venv --python {{ python_version }}

# 🧹 Nettoyage de l'environnement (cross-platform avec Python)
clean:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🧹 Nettoyage de l'environnement..." -ForegroundColor Yellow
    {{{{ else }}}}
        @echo "🧹 Nettoyage de l'environnement..."
    {{{{ endif }}}}
    python -c "import shutil, pathlib; [shutil.rmtree(p, ignore_errors=True) for p in ['.venv', *pathlib.Path('.').rglob('__pycache__'), *pathlib.Path('.').rglob('*.pyc'), *pathlib.Path('.').rglob('*.pyo')]]"
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "✅ Nettoyage terminé." -ForegroundColor Green
    {{{{ else }}}}
        @echo "✅ Nettoyage terminé."
    {{{{ endif }}}}

# 🔄 Réinstallation complète
reset: clean setup

# 📊 Lancement en mode développement
dev:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🔧 Lancement en mode développement..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "🔧 Lancement en mode développement..."
    {{{{ endif }}}}
    uv run streamlit run main.py --server.runOnSave=true --server.developmentMode=true

# 🧪 Tests
test:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🧪 Lancement des tests..." -ForegroundColor Cyan
    {{{{ else }}}}
        @echo "🧪 Lancement des tests..."
    {{{{ endif }}}}
    uv run pytest tests/ -v

# ℹ️ Informations sur le projet
info:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "📋 Informations sur {{ project_name }}:" -ForegroundColor Cyan
        @Write-Host "  📁 Projet: {{ project_name }}"
        @Write-Host "  🔧 Slug: {{ project_slug }}"
        @Write-Host "  🐍 Python: {{ python_version }}"
        @Write-Host "  👤 Auteur: {{ author_name }}"
        @Write-Host "  📧 Email: {{ author_email }}"
        @Write-Host "  💻 OS: Windows"
    {{{{ else }}}}
        @echo "📋 Informations sur {{ project_name }}:"
        @echo "  📁 Projet: {{ project_name }}"
        @echo "  🔧 Slug: {{ project_slug }}"
        @echo "  🐍 Python: {{ python_version }}"
        @echo "  👤 Auteur: {{ author_name }}"
        @echo "  📧 Email: {{ author_email }}"
        @echo "  💻 OS: {{{{ os_family() }}}}"
    {{{{ endif }}}}

# 📚 Aide - Liste toutes les commandes
help:
    {{{{ if os_family() == "windows" }}}}
        @Write-Host "🚀 {{ project_name }} - Commandes disponibles:" -ForegroundColor Green
        @Write-Host ""
        @Write-Host "🎯 Commandes principales:" -ForegroundColor Yellow
        @Write-Host "  just setup     - Setup complet du projet"
        @Write-Host "  just run       - Lancer l'application"
        @Write-Host "  just dev       - Mode développement"
        @Write-Host ""
        @Write-Host "📦 Gestion des dépendances:" -ForegroundColor Yellow
        @Write-Host "  just sync              - Synchroniser"
        @Write-Host "  just add PACKAGE       - Ajouter une lib"
        @Write-Host "  just add-dev PACKAGE   - Ajouter une lib de dev"
        @Write-Host "  just requirements      - Générer requirements.txt"
        @Write-Host ""
        @Write-Host "🔧 Maintenance:" -ForegroundColor Yellow
        @Write-Host "  just clean     - Nettoyer"
        @Write-Host "  just reset     - Réinstaller"
        @Write-Host "  just test      - Tests"
        @Write-Host ""
        @Write-Host "ℹ️ Informations:" -ForegroundColor Yellow
        @Write-Host "  just info      - Infos projet"
        @Write-Host "  just help      - Cette aide"
    {{{{ else }}}}
        @echo "🚀 {{ project_name }} - Commandes disponibles:"
        @echo ""
        @echo "🎯 Commandes principales:"
        @echo "  just setup     - Setup complet du projet"
        @echo "  just run       - Lancer l'application"
        @echo "  just dev       - Mode développement"
        @echo ""
        @echo "📦 Gestion des dépendances:"
        @echo "  just sync              - Synchroniser"
        @echo "  just add PACKAGE       - Ajouter une lib"
        @echo "  just add-dev PACKAGE   - Ajouter une lib de dev"
        @echo "  just requirements      - Générer requirements.txt"
        @echo ""
        @echo "🔧 Maintenance:"
        @echo "  just clean     - Nettoyer"
        @echo "  just reset     - Réinstaller"
        @echo "  just test      - Tests"
        @echo ""
        @echo "ℹ️ Informations:"
        @echo "  just info      - Infos projet"
        @echo "  just help      - Cette aide"
    {{{{ endif }}}}

# Commande par défaut
default: help
# Configuration pour Windows - DOIT être en première ligne
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

# 🚀 {{ project_name }} - Justfile
# Automatisation complète avec uv pour un développement express

# Variables
PYTHON_VERSION := "{{ python_version }}"
PROJECT_NAME := "{{ project_slug }}"

# 🎯 Setup complet du projet en une commande
setup:
    @Write-Host "🚀 Setup complet de {{ project_name }}..." -ForegroundColor Green
    @Write-Host "📦 Initialisation du projet avec uv..." -ForegroundColor Cyan
    uv init --python {{ python_version }}
    @Write-Host "🐍 Création de l'environnement virtuel..." -ForegroundColor Cyan
    uv venv --python {{ python_version }}
    @Write-Host "📚 Installation des dépendances depuis pyproject.toml..." -ForegroundColor Cyan
    uv sync
    @Write-Host "✅ Setup terminé ! Lancez 'just run' pour démarrer l'app." -ForegroundColor Green

# 🚀 Lancement de l'application Streamlit
run:
    @Write-Host "🚀 Lancement de {{ project_name }}..." -ForegroundColor Green
    uv run streamlit run main.py

# 📦 Installation/mise à jour des dépendances depuis pyproject.toml
sync:
    @Write-Host "📦 Synchronisation des dépendances..." -ForegroundColor Cyan
    uv sync

# 📦 Ajout d'une nouvelle dépendance
add PACKAGE:
    @Write-Host "📦 Ajout de {{{{ PACKAGE }}}}..." -ForegroundColor Cyan
    uv add {{{{ PACKAGE }}}}
    @Write-Host "✅ {{{{ PACKAGE }}}} ajouté au pyproject.toml." -ForegroundColor Green

# 📦 Ajout d'une dépendance de développement
add-dev PACKAGE:
    @Write-Host "🔧 Ajout de {{{{ PACKAGE }}}} (dev)..." -ForegroundColor Cyan
    uv add --dev {{{{ PACKAGE }}}}
    @Write-Host "✅ {{{{ PACKAGE }}}} ajouté aux dépendances de développement." -ForegroundColor Green

# 📄 Génération du requirements.txt pour déploiement (Streamlit Cloud)
requirements:
    @Write-Host "📄 Génération du requirements.txt depuis pyproject.toml..." -ForegroundColor Cyan
    uv pip compile pyproject.toml -o requirements.txt
    @Write-Host "✅ requirements.txt généré pour le déploiement." -ForegroundColor Green

# 🐍 Création de l'environnement virtuel uniquement
venv:
    @Write-Host "🐍 Création de l'environnement virtuel..." -ForegroundColor Cyan
    uv venv --python {{ python_version }}

# 🧹 Nettoyage de l'environnement (compatible Windows)
clean:
    @Write-Host "🧹 Nettoyage de l'environnement..." -ForegroundColor Yellow
    @if (Test-Path .venv) { Remove-Item -Recurse -Force .venv }
    @Get-ChildItem -Recurse -Filter "__pycache__" | Remove-Item -Recurse -Force
    @Get-ChildItem -Recurse -Filter "*.pyc" | Remove-Item -Force
    @Get-ChildItem -Recurse -Filter "*.pyo" | Remove-Item -Force
    @Write-Host "✅ Nettoyage terminé." -ForegroundColor Green

# 🔄 Réinstallation complète
reset: clean setup

# 📊 Lancement avec mode debug
dev:
    @Write-Host "🔧 Lancement en mode développement..." -ForegroundColor Cyan
    uv run streamlit run main.py --server.runOnSave=true --server.developmentMode=true

# 🧪 Tests (si présents)
test:
    @Write-Host "🧪 Lancement des tests..." -ForegroundColor Cyan
    uv run pytest tests/ -v

# ℹ️ Informations sur le projet
info:
    @Write-Host "📋 Informations sur {{ project_name }}:" -ForegroundColor Cyan
    @Write-Host "  📁 Projet: {{ project_name }}"
    @Write-Host "  🔧 Slug: {{ project_slug }}"
    @Write-Host "  🐍 Python: {{ python_version }}"
    @Write-Host "  👤 Auteur: {{ author_name }}"
    @Write-Host "  📧 Email: {{ author_email }}"

# 📚 Aide - Liste toutes les commandes disponibles
help:
    @Write-Host "🚀 {{ project_name }} - Commandes disponibles:" -ForegroundColor Green
    @Write-Host ""
    @Write-Host "🎯 Commandes principales:" -ForegroundColor Yellow
    @Write-Host "  just setup     - Setup complet du projet (init + venv + sync)"
    @Write-Host "  just run       - Lancer l'application Streamlit"
    @Write-Host "  just dev       - Lancer en mode développement"
    @Write-Host ""
    @Write-Host "📦 Gestion des dépendances avec uv:" -ForegroundColor Yellow
    @Write-Host "  just sync              - Synchroniser les dépendances depuis pyproject.toml"
    @Write-Host "  just add PACKAGE       - Ajouter une dépendance"
    @Write-Host "  just add-dev PACKAGE   - Ajouter une dépendance de dev"
    @Write-Host "  just requirements      - Générer requirements.txt pour déploiement"
    @Write-Host ""
    @Write-Host "🔧 Maintenance:" -ForegroundColor Yellow
    @Write-Host "  just venv      - Créer l'environnement virtuel"
    @Write-Host "  just clean     - Nettoyer l'environnement"
    @Write-Host "  just reset     - Réinstallation complète"
    @Write-Host "  just test      - Lancer les tests"
    @Write-Host ""
    @Write-Host "ℹ️ Informations:" -ForegroundColor Yellow
    @Write-Host "  just info      - Infos sur le projet"
    @Write-Host "  just help      - Afficher cette aide"
    @Write-Host ""
    @Write-Host "💡 Usage rapide:" -ForegroundColor Cyan
    @Write-Host "  1️⃣ just setup        # Premier lancement"
    @Write-Host "  2️⃣ just run          # Lancer l'app"
    @Write-Host "  3️⃣ just add pandas   # Ajouter une lib"
    @Write-Host "  4️⃣ just requirements # Avant déploiement"

# Commande par défaut (affiche l'aide)
default: help