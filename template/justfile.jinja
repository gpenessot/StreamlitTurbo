# 🚀 {{ project_name }} - Justfile
# Automatisation complète avec uv pour un développement express

# Variables
PYTHON_VERSION := "{{ python_version }}"
PROJECT_NAME := "{{ project_slug }}"

# 🎯 Setup complet du projet en une commande
setup:
    @echo "🚀 Setup complet de {{ project_name }}..."
    @echo "📦 Initialisation du projet avec uv..."
    uv init --python {{ python_version }}
    @echo "🐍 Création de l'environnement virtuel..."
    uv venv --python {{ python_version }}
    @echo "📚 Installation des dépendances depuis pyproject.toml..."
    uv sync
    @echo "✅ Setup terminé ! Lancez 'just run' pour démarrer l'app."

# 🚀 Lancement de l'application Streamlit
run:
    @echo "🚀 Lancement de {{ project_name }}..."
    uv run streamlit run main.py

# 📦 Installation/mise à jour des dépendances depuis pyproject.toml
sync:
    @echo "📦 Synchronisation des dépendances..."
    uv sync

# 📦 Ajout d'une nouvelle dépendance
add PACKAGE:
    @echo "📦 Ajout de {{ PACKAGE }}..."
    uv add {{ PACKAGE }}
    @echo "✅ {{ PACKAGE }} ajouté au pyproject.toml."

# 📦 Ajout d'une dépendance de développement
add-dev PACKAGE:
    @echo "🔧 Ajout de {{ PACKAGE }} (dev)..."
    uv add --dev {{ PACKAGE }}
    @echo "✅ {{ PACKAGE }} ajouté aux dépendances de développement."

# 📄 Génération du requirements.txt pour déploiement (Streamlit Cloud)
requirements:
    @echo "📄 Génération du requirements.txt depuis pyproject.toml..."
    uv pip compile pyproject.toml -o requirements.txt
    @echo "✅ requirements.txt généré pour le déploiement."

# 🐍 Création de l'environnement virtuel uniquement
venv:
    @echo "🐍 Création de l'environnement virtuel..."
    uv venv --python {{ python_version }}

# 🧹 Nettoyage de l'environnement
clean:
    @echo "🧹 Nettoyage de l'environnement..."
    rm -rf .venv/
    rm -rf __pycache__/
    find . -name "*.pyc" -delete
    find . -name "*.pyo" -delete
    @echo "✅ Nettoyage terminé."

# 🔄 Réinstallation complète
reset: clean setup

# 📊 Lancement avec mode debug
dev:
    @echo "🔧 Lancement en mode développement..."
    uv run streamlit run main.py --server.runOnSave=true --server.developmentMode=true

# 🧪 Tests (si présents)
test:
    @echo "🧪 Lancement des tests..."
    uv run pytest tests/ -v

# ℹ️ Informations sur le projet
info:
    @echo "📋 Informations sur {{ project_name }}:"
    @echo "  📁 Projet: {{ project_name }}"
    @echo "  🔧 Slug: {{ project_slug }}"
    @echo "  🐍 Python: {{ python_version }}"
    @echo "  👤 Auteur: {{ author_name }}"
    @echo "  📧 Email: {{ author_email }}"

# 📚 Aide - Liste toutes les commandes disponibles
help:
    @echo "🚀 {{ project_name }} - Commandes disponibles:"
    @echo ""
    @echo "🎯 Commandes principales:"
    @echo "  just setup     - Setup complet du projet (init + venv + sync)"
    @echo "  just run       - Lancer l'application Streamlit"
    @echo "  just dev       - Lancer en mode développement"
    @echo ""
    @echo "📦 Gestion des dépendances avec uv:"
    @echo "  just sync              - Synchroniser les dépendances depuis pyproject.toml"
    @echo "  just add PACKAGE       - Ajouter une dépendance"
    @echo "  just add-dev PACKAGE   - Ajouter une dépendance de dev"
    @echo "  just requirements      - Générer requirements.txt pour déploiement"
    @echo ""
    @echo "🔧 Maintenance:"
    @echo "  just venv      - Créer l'environnement virtuel"
    @echo "  just clean     - Nettoyer l'environnement"
    @echo "  just reset     - Réinstallation complète"
    @echo "  just test      - Lancer les tests"
    @echo ""
    @echo "ℹ️ Informations:"
    @echo "  just info      - Infos sur le projet"
    @echo "  just help      - Afficher cette aide"
    @echo ""
    @echo "💡 Usage rapide:"
    @echo "  1️⃣ just setup        # Premier lancement"
    @echo "  2️⃣ just run          # Lancer l'app"
    @echo "  3️⃣ just add pandas   # Ajouter une lib"
    @echo "  4️⃣ just requirements # Avant déploiement"

# Commande par défaut (affiche l'aide)
default: help
